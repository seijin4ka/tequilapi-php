<?php
/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tequila API
 *
 * The purpose of this documentation is to provide developers an insight of how to interact with Mysterium Node via Tequila API. This should demonstrate all the possible API calls with described parameters and responses.
 *
 * The version of the OpenAPI document: dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for accessPolicies
     *
     * Returns access policies.
     *
     */
    public function testAccessPolicies()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for affiliatorTokenReward
     *
     * Returns the amount of reward for a token (affiliator).
     *
     */
    public function testAffiliatorTokenReward()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for chains
     *
     * Returns available chain map.
     *
     */
    public function testChains()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for combinedFeesResponse
     *
     * Returns fees.
     *
     */
    public function testCombinedFeesResponse()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for connectivityStatus
     *
     * Returns session connectivity status.
     *
     */
    public function testConnectivityStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for eligibility
     *
     * Checks if given id is eligible for free registration.
     *
     */
    public function testEligibility()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feesDTO
     *
     * Returns fees.
     *
     */
    public function testFeesDTO()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for providerEligibility
     *
     * Checks if provider is eligible for free registration.
     *
     */
    public function testProviderEligibility()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for reward
     *
     * Returns the amount of reward for a token.
     *
     */
    public function testReward()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for settleAsync
     *
     * forces the settlement of promises for the given provider and hermes.
     *
     */
    public function testSettleAsync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for settleSync
     *
     * Forces the settlement of promises for the given provider and hermes.
     *
     */
    public function testSettleSync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for settlementList
     *
     * Returns settlement history.
     *
     */
    public function testSettlementList()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for stakeIncreaseAsync
     *
     * forces the settlement with stake increase of promises for the given provider and hermes..
     *
     */
    public function testStakeIncreaseAsync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for stakeIncreaseSync
     *
     * Forces the settlement with stake increase of promises for the given provider and hermes..
     *
     */
    public function testStakeIncreaseSync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for withdraw
     *
     * Asks to perform withdrawal to l1..
     *
     */
    public function testWithdraw()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
