<?php
/**
 * ProposalApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tequila API
 *
 * The purpose of this documentation is to provide developers an insight of how to interact with Mysterium Node via Tequila API. This should demonstrate all the possible API calls with described parameters and responses.
 *
 * The version of the OpenAPI document: dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProposalApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProposalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'listProposals' => [
            'application/json',
        ],
        'proposalFilterPresets' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listProposals
     *
     * Returns proposals
     *
     * @param  string $provider_id id of provider proposals (optional)
     * @param  string $service_type the service type of the proposal. Possible values are \&quot;openvpn\&quot;, \&quot;wireguard\&quot; and \&quot;noop\&quot; (optional)
     * @param  string $access_policy the access policy id to filter the proposals by (optional)
     * @param  string $access_policy_source the access policy source to filter the proposals by (optional)
     * @param  string $country If given will filter proposals by node location country. (optional)
     * @param  string $ip_type IP Type (residential, datacenter, etc.). (optional)
     * @param  int $compatibility_min Minimum compatibility level of the proposal. (optional)
     * @param  int $compatibility_max Maximum compatibility level of the proposal. (optional)
     * @param  float $quality_min Minimum quality of the provider. (optional)
     * @param  string $nat_compatibility Pick nodes compatible with NAT of specified type. Specify \&quot;auto\&quot; to probe NAT. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProposals'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListProposalsResponse|\OpenAPI\Client\Model\APIError
     */
    public function listProposals($provider_id = null, $service_type = null, $access_policy = null, $access_policy_source = null, $country = null, $ip_type = null, $compatibility_min = null, $compatibility_max = null, $quality_min = null, $nat_compatibility = null, string $contentType = self::contentTypes['listProposals'][0])
    {
        list($response) = $this->listProposalsWithHttpInfo($provider_id, $service_type, $access_policy, $access_policy_source, $country, $ip_type, $compatibility_min, $compatibility_max, $quality_min, $nat_compatibility, $contentType);
        return $response;
    }

    /**
     * Operation listProposalsWithHttpInfo
     *
     * Returns proposals
     *
     * @param  string $provider_id id of provider proposals (optional)
     * @param  string $service_type the service type of the proposal. Possible values are \&quot;openvpn\&quot;, \&quot;wireguard\&quot; and \&quot;noop\&quot; (optional)
     * @param  string $access_policy the access policy id to filter the proposals by (optional)
     * @param  string $access_policy_source the access policy source to filter the proposals by (optional)
     * @param  string $country If given will filter proposals by node location country. (optional)
     * @param  string $ip_type IP Type (residential, datacenter, etc.). (optional)
     * @param  int $compatibility_min Minimum compatibility level of the proposal. (optional)
     * @param  int $compatibility_max Maximum compatibility level of the proposal. (optional)
     * @param  float $quality_min Minimum quality of the provider. (optional)
     * @param  string $nat_compatibility Pick nodes compatible with NAT of specified type. Specify \&quot;auto\&quot; to probe NAT. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProposals'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListProposalsResponse|\OpenAPI\Client\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listProposalsWithHttpInfo($provider_id = null, $service_type = null, $access_policy = null, $access_policy_source = null, $country = null, $ip_type = null, $compatibility_min = null, $compatibility_max = null, $quality_min = null, $nat_compatibility = null, string $contentType = self::contentTypes['listProposals'][0])
    {
        $request = $this->listProposalsRequest($provider_id, $service_type, $access_policy, $access_policy_source, $country, $ip_type, $compatibility_min, $compatibility_max, $quality_min, $nat_compatibility, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListProposalsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListProposalsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListProposalsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\APIError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\APIError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListProposalsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListProposalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listProposalsAsync
     *
     * Returns proposals
     *
     * @param  string $provider_id id of provider proposals (optional)
     * @param  string $service_type the service type of the proposal. Possible values are \&quot;openvpn\&quot;, \&quot;wireguard\&quot; and \&quot;noop\&quot; (optional)
     * @param  string $access_policy the access policy id to filter the proposals by (optional)
     * @param  string $access_policy_source the access policy source to filter the proposals by (optional)
     * @param  string $country If given will filter proposals by node location country. (optional)
     * @param  string $ip_type IP Type (residential, datacenter, etc.). (optional)
     * @param  int $compatibility_min Minimum compatibility level of the proposal. (optional)
     * @param  int $compatibility_max Maximum compatibility level of the proposal. (optional)
     * @param  float $quality_min Minimum quality of the provider. (optional)
     * @param  string $nat_compatibility Pick nodes compatible with NAT of specified type. Specify \&quot;auto\&quot; to probe NAT. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProposals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProposalsAsync($provider_id = null, $service_type = null, $access_policy = null, $access_policy_source = null, $country = null, $ip_type = null, $compatibility_min = null, $compatibility_max = null, $quality_min = null, $nat_compatibility = null, string $contentType = self::contentTypes['listProposals'][0])
    {
        return $this->listProposalsAsyncWithHttpInfo($provider_id, $service_type, $access_policy, $access_policy_source, $country, $ip_type, $compatibility_min, $compatibility_max, $quality_min, $nat_compatibility, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listProposalsAsyncWithHttpInfo
     *
     * Returns proposals
     *
     * @param  string $provider_id id of provider proposals (optional)
     * @param  string $service_type the service type of the proposal. Possible values are \&quot;openvpn\&quot;, \&quot;wireguard\&quot; and \&quot;noop\&quot; (optional)
     * @param  string $access_policy the access policy id to filter the proposals by (optional)
     * @param  string $access_policy_source the access policy source to filter the proposals by (optional)
     * @param  string $country If given will filter proposals by node location country. (optional)
     * @param  string $ip_type IP Type (residential, datacenter, etc.). (optional)
     * @param  int $compatibility_min Minimum compatibility level of the proposal. (optional)
     * @param  int $compatibility_max Maximum compatibility level of the proposal. (optional)
     * @param  float $quality_min Minimum quality of the provider. (optional)
     * @param  string $nat_compatibility Pick nodes compatible with NAT of specified type. Specify \&quot;auto\&quot; to probe NAT. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProposals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProposalsAsyncWithHttpInfo($provider_id = null, $service_type = null, $access_policy = null, $access_policy_source = null, $country = null, $ip_type = null, $compatibility_min = null, $compatibility_max = null, $quality_min = null, $nat_compatibility = null, string $contentType = self::contentTypes['listProposals'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListProposalsResponse';
        $request = $this->listProposalsRequest($provider_id, $service_type, $access_policy, $access_policy_source, $country, $ip_type, $compatibility_min, $compatibility_max, $quality_min, $nat_compatibility, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listProposals'
     *
     * @param  string $provider_id id of provider proposals (optional)
     * @param  string $service_type the service type of the proposal. Possible values are \&quot;openvpn\&quot;, \&quot;wireguard\&quot; and \&quot;noop\&quot; (optional)
     * @param  string $access_policy the access policy id to filter the proposals by (optional)
     * @param  string $access_policy_source the access policy source to filter the proposals by (optional)
     * @param  string $country If given will filter proposals by node location country. (optional)
     * @param  string $ip_type IP Type (residential, datacenter, etc.). (optional)
     * @param  int $compatibility_min Minimum compatibility level of the proposal. (optional)
     * @param  int $compatibility_max Maximum compatibility level of the proposal. (optional)
     * @param  float $quality_min Minimum quality of the provider. (optional)
     * @param  string $nat_compatibility Pick nodes compatible with NAT of specified type. Specify \&quot;auto\&quot; to probe NAT. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProposals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listProposalsRequest($provider_id = null, $service_type = null, $access_policy = null, $access_policy_source = null, $country = null, $ip_type = null, $compatibility_min = null, $compatibility_max = null, $quality_min = null, $nat_compatibility = null, string $contentType = self::contentTypes['listProposals'][0])
    {












        $resourcePath = '/proposals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_id,
            'provider_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_type,
            'service_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_policy,
            'access_policy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_policy_source,
            'access_policy_source', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ip_type,
            'ip_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $compatibility_min,
            'compatibility_min', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $compatibility_max,
            'compatibility_max', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quality_min,
            'quality_min', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nat_compatibility,
            'nat_compatibility', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proposalFilterPresets
     *
     * Returns proposal filter presets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['proposalFilterPresets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListProposalFilterPresetsResponse|\OpenAPI\Client\Model\APIError
     */
    public function proposalFilterPresets(string $contentType = self::contentTypes['proposalFilterPresets'][0])
    {
        list($response) = $this->proposalFilterPresetsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation proposalFilterPresetsWithHttpInfo
     *
     * Returns proposal filter presets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['proposalFilterPresets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListProposalFilterPresetsResponse|\OpenAPI\Client\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function proposalFilterPresetsWithHttpInfo(string $contentType = self::contentTypes['proposalFilterPresets'][0])
    {
        $request = $this->proposalFilterPresetsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListProposalFilterPresetsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListProposalFilterPresetsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListProposalFilterPresetsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\APIError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\APIError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListProposalFilterPresetsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListProposalFilterPresetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proposalFilterPresetsAsync
     *
     * Returns proposal filter presets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['proposalFilterPresets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proposalFilterPresetsAsync(string $contentType = self::contentTypes['proposalFilterPresets'][0])
    {
        return $this->proposalFilterPresetsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proposalFilterPresetsAsyncWithHttpInfo
     *
     * Returns proposal filter presets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['proposalFilterPresets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proposalFilterPresetsAsyncWithHttpInfo(string $contentType = self::contentTypes['proposalFilterPresets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListProposalFilterPresetsResponse';
        $request = $this->proposalFilterPresetsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proposalFilterPresets'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['proposalFilterPresets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proposalFilterPresetsRequest(string $contentType = self::contentTypes['proposalFilterPresets'][0])
    {


        $resourcePath = '/proposals/filter-presets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
