<?php
/**
 * PaymentOrderResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tequila API
 *
 * The purpose of this documentation is to provide developers an insight of how to interact with Mysterium Node via Tequila API. This should demonstrate all the possible API calls with described parameters and responses.
 *
 * The version of the OpenAPI document: dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentOrderResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentOrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chain_id' => 'int',
        'channel_address' => 'string',
        'country' => 'string',
        'currency' => 'string',
        'gateway_name' => 'string',
        'id' => 'string',
        'identity' => 'string',
        'items_sub_total' => 'string',
        'order_total' => 'string',
        'pay_amount' => 'string',
        'pay_currency' => 'string',
        'public_gateway_data' => 'object',
        'receive_myst' => 'string',
        'state' => 'string',
        'status' => 'string',
        'tax_rate' => 'string',
        'tax_sub_total' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chain_id' => 'int64',
        'channel_address' => null,
        'country' => null,
        'currency' => null,
        'gateway_name' => null,
        'id' => null,
        'identity' => null,
        'items_sub_total' => null,
        'order_total' => null,
        'pay_amount' => null,
        'pay_currency' => null,
        'public_gateway_data' => null,
        'receive_myst' => null,
        'state' => null,
        'status' => null,
        'tax_rate' => null,
        'tax_sub_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'chain_id' => false,
        'channel_address' => false,
        'country' => false,
        'currency' => false,
        'gateway_name' => false,
        'id' => false,
        'identity' => false,
        'items_sub_total' => false,
        'order_total' => false,
        'pay_amount' => false,
        'pay_currency' => false,
        'public_gateway_data' => false,
        'receive_myst' => false,
        'state' => false,
        'status' => false,
        'tax_rate' => false,
        'tax_sub_total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chain_id' => 'chain_id',
        'channel_address' => 'channel_address',
        'country' => 'country',
        'currency' => 'currency',
        'gateway_name' => 'gateway_name',
        'id' => 'id',
        'identity' => 'identity',
        'items_sub_total' => 'items_sub_total',
        'order_total' => 'order_total',
        'pay_amount' => 'pay_amount',
        'pay_currency' => 'pay_currency',
        'public_gateway_data' => 'public_gateway_data',
        'receive_myst' => 'receive_myst',
        'state' => 'state',
        'status' => 'status',
        'tax_rate' => 'tax_rate',
        'tax_sub_total' => 'tax_sub_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chain_id' => 'setChainId',
        'channel_address' => 'setChannelAddress',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'gateway_name' => 'setGatewayName',
        'id' => 'setId',
        'identity' => 'setIdentity',
        'items_sub_total' => 'setItemsSubTotal',
        'order_total' => 'setOrderTotal',
        'pay_amount' => 'setPayAmount',
        'pay_currency' => 'setPayCurrency',
        'public_gateway_data' => 'setPublicGatewayData',
        'receive_myst' => 'setReceiveMyst',
        'state' => 'setState',
        'status' => 'setStatus',
        'tax_rate' => 'setTaxRate',
        'tax_sub_total' => 'setTaxSubTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chain_id' => 'getChainId',
        'channel_address' => 'getChannelAddress',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'gateway_name' => 'getGatewayName',
        'id' => 'getId',
        'identity' => 'getIdentity',
        'items_sub_total' => 'getItemsSubTotal',
        'order_total' => 'getOrderTotal',
        'pay_amount' => 'getPayAmount',
        'pay_currency' => 'getPayCurrency',
        'public_gateway_data' => 'getPublicGatewayData',
        'receive_myst' => 'getReceiveMyst',
        'state' => 'getState',
        'status' => 'getStatus',
        'tax_rate' => 'getTaxRate',
        'tax_sub_total' => 'getTaxSubTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('chain_id', $data ?? [], null);
        $this->setIfExists('channel_address', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('gateway_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identity', $data ?? [], null);
        $this->setIfExists('items_sub_total', $data ?? [], null);
        $this->setIfExists('order_total', $data ?? [], null);
        $this->setIfExists('pay_amount', $data ?? [], null);
        $this->setIfExists('pay_currency', $data ?? [], null);
        $this->setIfExists('public_gateway_data', $data ?? [], null);
        $this->setIfExists('receive_myst', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('tax_sub_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chain_id
     *
     * @return int|null
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param int|null $chain_id chain_id
     *
     * @return self
     */
    public function setChainId($chain_id)
    {
        if (is_null($chain_id)) {
            throw new \InvalidArgumentException('non-nullable chain_id cannot be null');
        }
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets channel_address
     *
     * @return string|null
     */
    public function getChannelAddress()
    {
        return $this->container['channel_address'];
    }

    /**
     * Sets channel_address
     *
     * @param string|null $channel_address channel_address
     *
     * @return self
     */
    public function setChannelAddress($channel_address)
    {
        if (is_null($channel_address)) {
            throw new \InvalidArgumentException('non-nullable channel_address cannot be null');
        }
        $this->container['channel_address'] = $channel_address;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets gateway_name
     *
     * @return string|null
     */
    public function getGatewayName()
    {
        return $this->container['gateway_name'];
    }

    /**
     * Sets gateway_name
     *
     * @param string|null $gateway_name gateway_name
     *
     * @return self
     */
    public function setGatewayName($gateway_name)
    {
        if (is_null($gateway_name)) {
            throw new \InvalidArgumentException('non-nullable gateway_name cannot be null');
        }
        $this->container['gateway_name'] = $gateway_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return string|null
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param string|null $identity identity
     *
     * @return self
     */
    public function setIdentity($identity)
    {
        if (is_null($identity)) {
            throw new \InvalidArgumentException('non-nullable identity cannot be null');
        }
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets items_sub_total
     *
     * @return string|null
     */
    public function getItemsSubTotal()
    {
        return $this->container['items_sub_total'];
    }

    /**
     * Sets items_sub_total
     *
     * @param string|null $items_sub_total items_sub_total
     *
     * @return self
     */
    public function setItemsSubTotal($items_sub_total)
    {
        if (is_null($items_sub_total)) {
            throw new \InvalidArgumentException('non-nullable items_sub_total cannot be null');
        }
        $this->container['items_sub_total'] = $items_sub_total;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return string|null
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param string|null $order_total order_total
     *
     * @return self
     */
    public function setOrderTotal($order_total)
    {
        if (is_null($order_total)) {
            throw new \InvalidArgumentException('non-nullable order_total cannot be null');
        }
        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets pay_amount
     *
     * @return string|null
     */
    public function getPayAmount()
    {
        return $this->container['pay_amount'];
    }

    /**
     * Sets pay_amount
     *
     * @param string|null $pay_amount pay_amount
     *
     * @return self
     */
    public function setPayAmount($pay_amount)
    {
        if (is_null($pay_amount)) {
            throw new \InvalidArgumentException('non-nullable pay_amount cannot be null');
        }
        $this->container['pay_amount'] = $pay_amount;

        return $this;
    }

    /**
     * Gets pay_currency
     *
     * @return string|null
     */
    public function getPayCurrency()
    {
        return $this->container['pay_currency'];
    }

    /**
     * Sets pay_currency
     *
     * @param string|null $pay_currency pay_currency
     *
     * @return self
     */
    public function setPayCurrency($pay_currency)
    {
        if (is_null($pay_currency)) {
            throw new \InvalidArgumentException('non-nullable pay_currency cannot be null');
        }
        $this->container['pay_currency'] = $pay_currency;

        return $this;
    }

    /**
     * Gets public_gateway_data
     *
     * @return object|null
     */
    public function getPublicGatewayData()
    {
        return $this->container['public_gateway_data'];
    }

    /**
     * Sets public_gateway_data
     *
     * @param object|null $public_gateway_data public_gateway_data
     *
     * @return self
     */
    public function setPublicGatewayData($public_gateway_data)
    {
        if (is_null($public_gateway_data)) {
            throw new \InvalidArgumentException('non-nullable public_gateway_data cannot be null');
        }
        $this->container['public_gateway_data'] = $public_gateway_data;

        return $this;
    }

    /**
     * Gets receive_myst
     *
     * @return string|null
     */
    public function getReceiveMyst()
    {
        return $this->container['receive_myst'];
    }

    /**
     * Sets receive_myst
     *
     * @param string|null $receive_myst receive_myst
     *
     * @return self
     */
    public function setReceiveMyst($receive_myst)
    {
        if (is_null($receive_myst)) {
            throw new \InvalidArgumentException('non-nullable receive_myst cannot be null');
        }
        $this->container['receive_myst'] = $receive_myst;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string|null $tax_rate tax_rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_sub_total
     *
     * @return string|null
     */
    public function getTaxSubTotal()
    {
        return $this->container['tax_sub_total'];
    }

    /**
     * Sets tax_sub_total
     *
     * @param string|null $tax_sub_total tax_sub_total
     *
     * @return self
     */
    public function setTaxSubTotal($tax_sub_total)
    {
        if (is_null($tax_sub_total)) {
            throw new \InvalidArgumentException('non-nullable tax_sub_total cannot be null');
        }
        $this->container['tax_sub_total'] = $tax_sub_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


