<?php
/**
 * SettlementDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tequila API
 *
 * The purpose of this documentation is to provide developers an insight of how to interact with Mysterium Node via Tequila API. This should demonstrate all the possible API calls with described parameters and responses.
 *
 * The version of the OpenAPI document: dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SettlementDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SettlementDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SettlementDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'string',
        'beneficiary' => 'string',
        'block_explorer_url' => 'string',
        'channel_address' => 'string',
        'error' => 'string',
        'fees' => 'string',
        'hermes_id' => 'string',
        'is_withdrawal' => 'bool',
        'provider_id' => 'string',
        'settled_at' => 'string',
        'tx_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'beneficiary' => null,
        'block_explorer_url' => null,
        'channel_address' => null,
        'error' => null,
        'fees' => null,
        'hermes_id' => null,
        'is_withdrawal' => null,
        'provider_id' => null,
        'settled_at' => null,
        'tx_hash' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'beneficiary' => false,
        'block_explorer_url' => false,
        'channel_address' => false,
        'error' => false,
        'fees' => false,
        'hermes_id' => false,
        'is_withdrawal' => false,
        'provider_id' => false,
        'settled_at' => false,
        'tx_hash' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'beneficiary' => 'beneficiary',
        'block_explorer_url' => 'block_explorer_url',
        'channel_address' => 'channel_address',
        'error' => 'error',
        'fees' => 'fees',
        'hermes_id' => 'hermes_id',
        'is_withdrawal' => 'is_withdrawal',
        'provider_id' => 'provider_id',
        'settled_at' => 'settled_at',
        'tx_hash' => 'tx_hash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'beneficiary' => 'setBeneficiary',
        'block_explorer_url' => 'setBlockExplorerUrl',
        'channel_address' => 'setChannelAddress',
        'error' => 'setError',
        'fees' => 'setFees',
        'hermes_id' => 'setHermesId',
        'is_withdrawal' => 'setIsWithdrawal',
        'provider_id' => 'setProviderId',
        'settled_at' => 'setSettledAt',
        'tx_hash' => 'setTxHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'beneficiary' => 'getBeneficiary',
        'block_explorer_url' => 'getBlockExplorerUrl',
        'channel_address' => 'getChannelAddress',
        'error' => 'getError',
        'fees' => 'getFees',
        'hermes_id' => 'getHermesId',
        'is_withdrawal' => 'getIsWithdrawal',
        'provider_id' => 'getProviderId',
        'settled_at' => 'getSettledAt',
        'tx_hash' => 'getTxHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('beneficiary', $data ?? [], null);
        $this->setIfExists('block_explorer_url', $data ?? [], null);
        $this->setIfExists('channel_address', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('hermes_id', $data ?? [], null);
        $this->setIfExists('is_withdrawal', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('settled_at', $data ?? [], null);
        $this->setIfExists('tx_hash', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return string|null
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param string|null $beneficiary beneficiary
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        if (is_null($beneficiary)) {
            throw new \InvalidArgumentException('non-nullable beneficiary cannot be null');
        }
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets block_explorer_url
     *
     * @return string|null
     */
    public function getBlockExplorerUrl()
    {
        return $this->container['block_explorer_url'];
    }

    /**
     * Sets block_explorer_url
     *
     * @param string|null $block_explorer_url block_explorer_url
     *
     * @return self
     */
    public function setBlockExplorerUrl($block_explorer_url)
    {
        if (is_null($block_explorer_url)) {
            throw new \InvalidArgumentException('non-nullable block_explorer_url cannot be null');
        }
        $this->container['block_explorer_url'] = $block_explorer_url;

        return $this;
    }

    /**
     * Gets channel_address
     *
     * @return string|null
     */
    public function getChannelAddress()
    {
        return $this->container['channel_address'];
    }

    /**
     * Sets channel_address
     *
     * @param string|null $channel_address channel_address
     *
     * @return self
     */
    public function setChannelAddress($channel_address)
    {
        if (is_null($channel_address)) {
            throw new \InvalidArgumentException('non-nullable channel_address cannot be null');
        }
        $this->container['channel_address'] = $channel_address;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return string|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param string|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets hermes_id
     *
     * @return string|null
     */
    public function getHermesId()
    {
        return $this->container['hermes_id'];
    }

    /**
     * Sets hermes_id
     *
     * @param string|null $hermes_id hermes_id
     *
     * @return self
     */
    public function setHermesId($hermes_id)
    {
        if (is_null($hermes_id)) {
            throw new \InvalidArgumentException('non-nullable hermes_id cannot be null');
        }
        $this->container['hermes_id'] = $hermes_id;

        return $this;
    }

    /**
     * Gets is_withdrawal
     *
     * @return bool|null
     */
    public function getIsWithdrawal()
    {
        return $this->container['is_withdrawal'];
    }

    /**
     * Sets is_withdrawal
     *
     * @param bool|null $is_withdrawal is_withdrawal
     *
     * @return self
     */
    public function setIsWithdrawal($is_withdrawal)
    {
        if (is_null($is_withdrawal)) {
            throw new \InvalidArgumentException('non-nullable is_withdrawal cannot be null');
        }
        $this->container['is_withdrawal'] = $is_withdrawal;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id provider_id
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets settled_at
     *
     * @return string|null
     */
    public function getSettledAt()
    {
        return $this->container['settled_at'];
    }

    /**
     * Sets settled_at
     *
     * @param string|null $settled_at settled_at
     *
     * @return self
     */
    public function setSettledAt($settled_at)
    {
        if (is_null($settled_at)) {
            throw new \InvalidArgumentException('non-nullable settled_at cannot be null');
        }
        $this->container['settled_at'] = $settled_at;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string|null $tx_hash tx_hash
     *
     * @return self
     */
    public function setTxHash($tx_hash)
    {
        if (is_null($tx_hash)) {
            throw new \InvalidArgumentException('non-nullable tx_hash cannot be null');
        }
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


