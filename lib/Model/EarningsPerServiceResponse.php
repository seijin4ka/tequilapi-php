<?php
/**
 * EarningsPerServiceResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tequila API
 *
 * The purpose of this documentation is to provide developers an insight of how to interact with Mysterium Node via Tequila API. This should demonstrate all the possible API calls with described parameters and responses.
 *
 * The version of the OpenAPI document: dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EarningsPerServiceResponse Class Doc Comment
 *
 * @category Class
 * @description EarningsPerServiceResponse contains information about earnings per service
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EarningsPerServiceResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EarningsPerServiceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_transfer_tokens' => '\OpenAPI\Client\Model\Tokens',
        'dvpn_tokens' => '\OpenAPI\Client\Model\Tokens',
        'public_tokens' => '\OpenAPI\Client\Model\Tokens',
        'scraping_tokens' => '\OpenAPI\Client\Model\Tokens',
        'total_data_transfer_tokens' => '\OpenAPI\Client\Model\Tokens',
        'total_dvpn_tokens' => '\OpenAPI\Client\Model\Tokens',
        'total_public_tokens' => '\OpenAPI\Client\Model\Tokens',
        'total_scraping_tokens' => '\OpenAPI\Client\Model\Tokens',
        'total_tokens' => '\OpenAPI\Client\Model\Tokens'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_transfer_tokens' => null,
        'dvpn_tokens' => null,
        'public_tokens' => null,
        'scraping_tokens' => null,
        'total_data_transfer_tokens' => null,
        'total_dvpn_tokens' => null,
        'total_public_tokens' => null,
        'total_scraping_tokens' => null,
        'total_tokens' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_transfer_tokens' => false,
        'dvpn_tokens' => false,
        'public_tokens' => false,
        'scraping_tokens' => false,
        'total_data_transfer_tokens' => false,
        'total_dvpn_tokens' => false,
        'total_public_tokens' => false,
        'total_scraping_tokens' => false,
        'total_tokens' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_transfer_tokens' => 'data_transfer_tokens',
        'dvpn_tokens' => 'dvpn_tokens',
        'public_tokens' => 'public_tokens',
        'scraping_tokens' => 'scraping_tokens',
        'total_data_transfer_tokens' => 'total_data_transfer_tokens',
        'total_dvpn_tokens' => 'total_dvpn_tokens',
        'total_public_tokens' => 'total_public_tokens',
        'total_scraping_tokens' => 'total_scraping_tokens',
        'total_tokens' => 'total_tokens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_transfer_tokens' => 'setDataTransferTokens',
        'dvpn_tokens' => 'setDvpnTokens',
        'public_tokens' => 'setPublicTokens',
        'scraping_tokens' => 'setScrapingTokens',
        'total_data_transfer_tokens' => 'setTotalDataTransferTokens',
        'total_dvpn_tokens' => 'setTotalDvpnTokens',
        'total_public_tokens' => 'setTotalPublicTokens',
        'total_scraping_tokens' => 'setTotalScrapingTokens',
        'total_tokens' => 'setTotalTokens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_transfer_tokens' => 'getDataTransferTokens',
        'dvpn_tokens' => 'getDvpnTokens',
        'public_tokens' => 'getPublicTokens',
        'scraping_tokens' => 'getScrapingTokens',
        'total_data_transfer_tokens' => 'getTotalDataTransferTokens',
        'total_dvpn_tokens' => 'getTotalDvpnTokens',
        'total_public_tokens' => 'getTotalPublicTokens',
        'total_scraping_tokens' => 'getTotalScrapingTokens',
        'total_tokens' => 'getTotalTokens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_transfer_tokens', $data ?? [], null);
        $this->setIfExists('dvpn_tokens', $data ?? [], null);
        $this->setIfExists('public_tokens', $data ?? [], null);
        $this->setIfExists('scraping_tokens', $data ?? [], null);
        $this->setIfExists('total_data_transfer_tokens', $data ?? [], null);
        $this->setIfExists('total_dvpn_tokens', $data ?? [], null);
        $this->setIfExists('total_public_tokens', $data ?? [], null);
        $this->setIfExists('total_scraping_tokens', $data ?? [], null);
        $this->setIfExists('total_tokens', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_transfer_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getDataTransferTokens()
    {
        return $this->container['data_transfer_tokens'];
    }

    /**
     * Sets data_transfer_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $data_transfer_tokens data_transfer_tokens
     *
     * @return self
     */
    public function setDataTransferTokens($data_transfer_tokens)
    {
        if (is_null($data_transfer_tokens)) {
            throw new \InvalidArgumentException('non-nullable data_transfer_tokens cannot be null');
        }
        $this->container['data_transfer_tokens'] = $data_transfer_tokens;

        return $this;
    }

    /**
     * Gets dvpn_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getDvpnTokens()
    {
        return $this->container['dvpn_tokens'];
    }

    /**
     * Sets dvpn_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $dvpn_tokens dvpn_tokens
     *
     * @return self
     */
    public function setDvpnTokens($dvpn_tokens)
    {
        if (is_null($dvpn_tokens)) {
            throw new \InvalidArgumentException('non-nullable dvpn_tokens cannot be null');
        }
        $this->container['dvpn_tokens'] = $dvpn_tokens;

        return $this;
    }

    /**
     * Gets public_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getPublicTokens()
    {
        return $this->container['public_tokens'];
    }

    /**
     * Sets public_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $public_tokens public_tokens
     *
     * @return self
     */
    public function setPublicTokens($public_tokens)
    {
        if (is_null($public_tokens)) {
            throw new \InvalidArgumentException('non-nullable public_tokens cannot be null');
        }
        $this->container['public_tokens'] = $public_tokens;

        return $this;
    }

    /**
     * Gets scraping_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getScrapingTokens()
    {
        return $this->container['scraping_tokens'];
    }

    /**
     * Sets scraping_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $scraping_tokens scraping_tokens
     *
     * @return self
     */
    public function setScrapingTokens($scraping_tokens)
    {
        if (is_null($scraping_tokens)) {
            throw new \InvalidArgumentException('non-nullable scraping_tokens cannot be null');
        }
        $this->container['scraping_tokens'] = $scraping_tokens;

        return $this;
    }

    /**
     * Gets total_data_transfer_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getTotalDataTransferTokens()
    {
        return $this->container['total_data_transfer_tokens'];
    }

    /**
     * Sets total_data_transfer_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $total_data_transfer_tokens total_data_transfer_tokens
     *
     * @return self
     */
    public function setTotalDataTransferTokens($total_data_transfer_tokens)
    {
        if (is_null($total_data_transfer_tokens)) {
            throw new \InvalidArgumentException('non-nullable total_data_transfer_tokens cannot be null');
        }
        $this->container['total_data_transfer_tokens'] = $total_data_transfer_tokens;

        return $this;
    }

    /**
     * Gets total_dvpn_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getTotalDvpnTokens()
    {
        return $this->container['total_dvpn_tokens'];
    }

    /**
     * Sets total_dvpn_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $total_dvpn_tokens total_dvpn_tokens
     *
     * @return self
     */
    public function setTotalDvpnTokens($total_dvpn_tokens)
    {
        if (is_null($total_dvpn_tokens)) {
            throw new \InvalidArgumentException('non-nullable total_dvpn_tokens cannot be null');
        }
        $this->container['total_dvpn_tokens'] = $total_dvpn_tokens;

        return $this;
    }

    /**
     * Gets total_public_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getTotalPublicTokens()
    {
        return $this->container['total_public_tokens'];
    }

    /**
     * Sets total_public_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $total_public_tokens total_public_tokens
     *
     * @return self
     */
    public function setTotalPublicTokens($total_public_tokens)
    {
        if (is_null($total_public_tokens)) {
            throw new \InvalidArgumentException('non-nullable total_public_tokens cannot be null');
        }
        $this->container['total_public_tokens'] = $total_public_tokens;

        return $this;
    }

    /**
     * Gets total_scraping_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getTotalScrapingTokens()
    {
        return $this->container['total_scraping_tokens'];
    }

    /**
     * Sets total_scraping_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $total_scraping_tokens total_scraping_tokens
     *
     * @return self
     */
    public function setTotalScrapingTokens($total_scraping_tokens)
    {
        if (is_null($total_scraping_tokens)) {
            throw new \InvalidArgumentException('non-nullable total_scraping_tokens cannot be null');
        }
        $this->container['total_scraping_tokens'] = $total_scraping_tokens;

        return $this;
    }

    /**
     * Gets total_tokens
     *
     * @return \OpenAPI\Client\Model\Tokens|null
     */
    public function getTotalTokens()
    {
        return $this->container['total_tokens'];
    }

    /**
     * Sets total_tokens
     *
     * @param \OpenAPI\Client\Model\Tokens|null $total_tokens total_tokens
     *
     * @return self
     */
    public function setTotalTokens($total_tokens)
    {
        if (is_null($total_tokens)) {
            throw new \InvalidArgumentException('non-nullable total_tokens cannot be null');
        }
        $this->container['total_tokens'] = $total_tokens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


